package com.xiaomu.manager
{
	import com.xiaomu.data.Student;
	
	import coco.core.Application;
	import coco.event.SocketEvent;
	import coco.net.SocketServer;
	import coco.net.SocketServerClient;

	/**
	 * Socket服务管理器 
	 * 
	 * @author coco
	 */	
	public class SocketServerManager
	{
		public function SocketServerManager()
		{
		}
		
		//----------------------------------------------------------------------------------------------------------------
		//
		//  Get Instance
		//
		//----------------------------------------------------------------------------------------------------------------
		
		private static var instance:SocketServerManager;
		
		public static function getInstance():SocketServerManager
		{
			if (!instance)
				instance = new SocketServerManager();
			
			return instance;
		}
		
		//----------------------------------------------------------------------------------------------------------------
		//
		//  Methods
		//
		//----------------------------------------------------------------------------------------------------------------
		
		private var curApplication:Application;
		
		/**
		 * 学生客户端 
		 */		
		public var studentClients:Vector.<SocketServerClient> = new Vector.<SocketServerClient>();
		
		
		public function init(application:Application):void
		{
			curApplication = application;
			
			// 初始化通信服务器
			SocketServer.getInstance().addEventListener(SocketEvent.LOG, server_logHandler);
			SocketServer.getInstance().addEventListener(SocketEvent.CONNECT, socketServer_connectHandler);
			SocketServer.getInstance().init();
		}
		
		protected function server_logHandler(event:SocketEvent):void
		{
			trace(event.descript);
		}
		
		protected function socketServer_connectHandler(event:SocketEvent):void
		{
			// 有学生端连接
			event.client.addEventListener(SocketEvent.LOG, client_logHandler);
			event.client.addEventListener(SocketEvent.MESSAGE, client_messageHandler);
			event.client.addEventListener(SocketEvent.DISCONNECT, client_disconnectHandler);
			studentClients.push(event.client);
			
			// 有学生端连接就生成个学生数据
			var student:Student = new Student();
			student.id = event.client.id;
			DataManager.getInstance().addStudent(student);
		}
		
		protected function client_logHandler(event:SocketEvent):void
		{
			trace(event.descript);
		}
		
		protected function client_messageHandler(event:SocketEvent):void
		{
			
		}
		
		protected function client_disconnectHandler(event:SocketEvent):void
		{
			var client:SocketServerClient = event.client;
			if (client)
			{
				trace(client.id, "已断开连接");
				removeStudentClientByID(client.id); // 删除通信链路
				DataManager.getInstance().removeStudent(client.id); // 删除学生数据
			}
		}
		
		
		//----------------------------------------------------------------------------------------------------------------
		//
		//  StudentClient 操作
		//
		//----------------------------------------------------------------------------------------------------------------
		
		public function addStudentClient(client:SocketServerClient):void
		{
			if (!client) return;
			
			removeStudentClient(client);
			studentClients.push(client);
		}
		
		public function removeStudentClient(client:SocketServerClient):void
		{
			if (!client) return;
			
			var aindex:int = studentClients.length;
			var a:SocketServerClient;
			for (var i:int = aindex - 1; i >= 0; i--)
			{
				a = studentClients[i];
				if (a.id == client.id)
				{
					studentClients.splice(i, 1); // delete
				}
			}
		}
		
		public function removeStudentClientByID(id:String):void
		{
			var aindex:int = studentClients.length;
			var a:SocketServerClient;
			for (var i:int = aindex - 1; i >= 0; i--)
			{
				a = studentClients[i];
				if (a.id == id)
				{
					studentClients.splice(i, 1); // delete
				}
			}
		}
		
		public function getStudentClient(remoteAddress:String):SocketServerClient
		{
			var aindex:int = studentClients.length;
			var a:SocketServerClient;
			for (var i:int = aindex - 1; i >= 0; i--)
			{
				a = studentClients[i];
				if (a.id == remoteAddress)
				{
					return a;
				}
			}
			
			return null;
		}
		
	}
}


